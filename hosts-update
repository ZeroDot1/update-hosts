#!/usr/bin/env bash
# Author:
#  Héctor Molinero Fernández <me@znt.se>.
#
# Modified by:
#  pyamsoft <pyam(dot)soft(at)gmail(dot)com>

# Exit on errors:
# For more information about these particular options, see
#    https://stackoverflow.com/questions/13468481/when-to-use-set-e
set -eu
set -o pipefail

# Configuration:
BLOCKLIST="" # Leave this blank
HOSTS="" # Leave this blank
DST_HOSTS="/etc/hosts"
DST_IP="0.0.0.0"
# NOTE: Adding the alias of the 0 domain to itself fixes a display issue that
#       can occur when using traceroute, netstat and the like.
HEADER="
127.0.0.1 $(uname -n) localhost
255.255.255.255 broadcasthost
0.0.0.0 0.0.0.0
"
SOURCES=(
	"http://winhelp2002.mvps.org/hosts.txt"
	"http://someonewhocares.org/hosts/hosts"
	# hosts-file.net has been experiencing 503 errors the past couple of days,
	# which will make the script fail out when attempting to pull from it.
	# Sit tight, as there is not much one can do other than comment out the
	# hosts-file.net URL when it is not working.
	# "http://hosts-file.net/ad_servers.txt" # Ad servers only
	"http://hosts-file.net/download/hosts.txt" # The full host list, blocks malicious domains
	"http://www.malwaredomainlist.com/hostslist/hosts.txt"
	"http://pgl.yoyo.org/adservers/serverlist.php?hostformat=hosts&mimetype=plaintext"
	"http://adaway.org/hosts.txt"
	"http://malwaredomains.lehigh.edu/files/justdomains"
)

WHITELIST=(
	"example.com"
	"example.org"
)
# BLACKLIST DOMAINS
#    agor.io: Jumpscare
#    pinion.gg: Ads in Counter Strike: Global Offensive and other games
BLACKLIST=(
	"agor.io"
	"www.agor.io"
	"adback.pinion.gg"
	"api.pinion.gg"
	"bin.pinion.gg"
	"blog.pinion.gg"
	"bork.pinion.gg"
	"calendar.pinion.gg"
	"cdn.pinion.gg"
	"cp.pinion.gg"
	"crm.pinion.gg"
	"delivery.pinion.gg"
	"direct.pinion.gg"
	"docs.pinion.gg"
	"immuniser.pinion.gg"
	"kermit.pinion.gg"
	"legacy.pinion.gg"
	"log.pinion.gg"
	"mail.pinion.gg"
	"mailer.pinion.gg"
	"motd.pinion.gg"
	"ns1.pinion.gg"
	"ns2.pinion.gg"
	"ns3.pinion.gg"
	"ns4.pinion.gg"
	"ns5.pinion.gg"
	"ns6.pinion.gg"
	"office.pinion.gg"
	"oscar.pinion.gg"
	"pinion-log.pinion.gg"
	"pinion.gg"
	"pog.pinion.gg"
	"quartermaster.pinion.gg"
	"seen.pinion.gg"
	"stage.pinion.gg"
	"templ4d2.pinion.gg"
	"tix.pinion.gg"
	"transcoded.pinion.gg"
	"video.pinion.gg"
	"voip.pinion.gg"
	"wiki.pinion.gg"
	"www.pinion.gg"
)

##
# Display a general message
##
actionMsg() {
	printf "%b + %b%s%b\n" "\e[1;33m" "\e[1;32m" "$1" "\e[0m"
}

##
# Display an information snippet
##
infoMsg() {
	printf "   - %s\n" "$1"
}

##
# Check the environment path for the given binary, exit if it is not found
##
checkForBinary() {
	if ! which $1 > /dev/null 2>&1; then
		printf "The '%s' binary is required for operation of this script." "$1"
		printf "Please install '%s' onto your system." "$1"
		exit 1
	fi
}

##
# Print out the user configuration
##
printConfig() {
	infoMsg "Hosts location: $DST_HOSTS"
	infoMsg "Destination IP: $DST_IP"
}

##
# Sources list parsing
##
downloadSources() {
	for URL in "${SOURCES[@]}"; do
		infoMsg "$URL"
		local CONTENT=$(wget -T 10 -qO- "$URL")
		# Inform user if the download fails or has no content
		if [[ "$CONTENT" = "" ]]; then
			printf "\t%s\n" "URL: '$URL' failed to download or is empty."
			# exit 1
		fi
		BLOCKLIST=$(printf "%s\n%s\n" "$BLOCKLIST" "$CONTENT")
		unset CONTENT
	done
}

##
# Change EOL from DOS to Unix format
##
changeEOL() {
	infoMsg "Change EOL to Unix format"
	BLOCKLIST=$(printf "%s\n" "$BLOCKLIST" | sed 's/\r//g')
}

##
# Only select lines which contain a host, do not select comments/other
##
selectHostLines() {
	infoMsg "Select only hosts lines"
	local IP_REGEX='([0-9]{1,3}\.){3}[0-9]{1,3}[[:space:]]+'
	local DOMAIN_REGEX='([\p{L}0-9_-]{1,63}\.)+\p{L}[\p{L}0-9_-]{1,62}(?=[[:space:]#]|$)'
	BLOCKLIST=$(printf "%s\n" "$BLOCKLIST" | grep -Po "(^($IP_REGEX)|^)$DOMAIN_REGEX")
	unset IP_REGEX DOMAIN_REGEX

}

##
# Remove any predefined destinations, as they may be untrustworthy
##
removeUntrustedDomain() {
	infoMsg "Remove old destination"
	BLOCKLIST=$(printf "%s\n" "$BLOCKLIST" | sed -r 's/^([0-9]{1,3}\.){3}[0-9]{1,3}[[:space:]]+//g')
}

##
# Remove any entries containing the localhost, as it will be added by the header later on
##
removeLocalEntries() {
	infoMsg "Remove local entries"
	BLOCKLIST=$(printf "%s\n" "$BLOCKLIST" | grep -Ev '^(localhost|localhost.localdomain|local|broadcasthost)$')
}

##
# Apply the user whitelist
##
applyWhitelist() {
	infoMsg "Apply whitelist"
	for DOMAIN in "${WHITELIST[@]}"; do
		BLOCKLIST=$(printf "%s\n" "$BLOCKLIST" | grep -Fxv "$DOMAIN")
	done
}

##
# Apply the user blacklist
##
applyBlacklist() {
	infoMsg "Apply blacklist"
	for DOMAIN in "${BLACKLIST[@]}"; do
		BLOCKLIST=$(printf "%s\n%s\n" "$BLOCKLIST" "$DOMAIN")
	done
}

##
# Remove duplicate entries
##
removeDuplicates() {
	infoMsg "Remove duplicate entries"
	BLOCKLIST=$(printf "%s\n" "$BLOCKLIST" | awk '!a[$0]++')
}

##
# Sort the entries by string numerical value
##
sortEntries() {
	infoMsg "Sort entries"
	BLOCKLIST=$(printf "%s\n" "$BLOCKLIST" | sort -n)
}

##
# Add the configured destination, by default the zero address
##
addNewDestination() {
	infoMsg "Add new destination"
	BLOCKLIST=$(printf "%s\n" "$BLOCKLIST" | sed "s/^/$DST_IP /g")
}

##
# Parse the header and create the new hosts file
##
generateNewHostsFile() {
	HEADER=$(printf "# <header>%s# </header>\n" "$HEADER")
	HEADER=$(printf "# %s\n%s\n" "$(date --rfc-2822)" "$HEADER")
	HOSTS=$(printf "%s\n# <blocklist>\n%s\n# </blocklist>" "$HEADER" "$BLOCKLIST")
}

##
# Backup original hosts file
##
backupOldHostsFile() {
	infoMsg "Creating backup of original hosts file..."
	if [ $EUID -ne 0 ]; then
		sudo cp $DST_HOSTS "$DST_HOSTS.backup.$(date +%Y%m%d)"
	else
		cp $DST_HOSTS "$DST_HOSTS.backup.$(date +%Y%m%d)"
	fi
}

##
# Install the new hosts file to the destination
##
installNewHostsFile() {
	infoMsg "Installing new hosts file..."
	if [ $EUID -ne 0 ]; then
		printf "%s\n" "$HOSTS" | sudo tee $DST_HOSTS > /dev/null
	else
		printf "%s\n" "$HOSTS" | tee $DST_HOSTS > /dev/null
	fi
}

##
# Print the differences between the number of hosts in each file
##
printHostsFileDifferences() {
	local OLD_HOSTS_NUMBER=$(wc -l < "$DST_HOSTS.backup.$(date +%Y%m%d)")
	local NEW_HOSTS_NUMBER=$(wc -l < $DST_HOSTS)
	printf "%b + %b%s %bhosts added! (%b + %b%s %b)\n" \
		"\e[1;33m" "\e[1;32m" "$NEW_HOSTS_NUMBER" \
		"\e[0m" "\e[1;32m" "\e[1;34m" \
		"$((NEW_HOSTS_NUMBER - OLD_HOSTS_NUMBER))" "\e[0m"
	unset OLD_HOSTS_NUMBER NEW_HOSTS_NUMBER
}


# Script begins here

# Check for required binaries, exit out if they are not present
checkForBinary wget
checkForBinary sed
checkForBinary grep
checkForBinary sort
checkForBinary awk
checkForBinary tee
checkForBinary cp
checkForBinary wc
checkForBinary printf

# Process begins:
actionMsg "Configuration:"
printConfig

actionMsg "Downloading sources lists..."
downloadSources

actionMsg "Parsing sources lists..."
changeEOL
selectHostLines
removeUntrustedDomain
removeLocalEntries
applyWhitelist
applyBlacklist
removeDuplicates
sortEntries
addNewDestination
generateNewHostsFile

actionMsg "Generating hosts file..."
backupOldHostsFile
installNewHostsFile
printHostsFileDifferences

